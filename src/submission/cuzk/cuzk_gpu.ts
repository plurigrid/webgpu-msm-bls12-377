import mustache from 'mustache'
import { BigIntPoint } from "../../reference/types"
import {
    get_device,
    create_and_write_sb,
    create_bind_group,
    create_bind_group_layout,
    create_compute_pipeline,
    create_sb,
    read_from_gpu,
    execute_pipeline,
} from '../gpu'
import {
    to_words_le,
    gen_p_limbs,
    gen_r_limbs,
    gen_mu_limbs,
    u8s_to_bigints,
    u8s_to_numbers,
    u8s_to_numbers_32,
    numbers_to_u8s_for_gpu,
    bigints_to_16_bit_words_for_gpu,
    bigints_to_u8_for_gpu,
    compute_misc_params,
    decompose_scalars,
} from '../utils'
import assert from 'assert'

import convert_point_coords_shader from '../wgsl/convert_point_coords.template.wgsl'
import extract_word_from_bytes_le_funcs from '../wgsl/extract_word_from_bytes_le.template.wgsl'
import structs from '../wgsl/struct/structs.template.wgsl'
import bigint_funcs from '../wgsl/bigint/bigint.template.wgsl'
import field_funcs from '../wgsl/field/field.template.wgsl'
import ec_funcs from '../wgsl/curve/ec.template.wgsl'
import barrett_functions from '../wgsl/barrett.template.wgsl'
import montgomery_product_funcs from '../wgsl/montgomery/mont_pro_product.template.wgsl'
import decompose_scalars_shader from '../wgsl/decompose_scalars.template.wgsl'
import gen_csr_precompute_shader from '../wgsl/gen_csr_precompute.template.wgsl'
import preaggregation_stage_1_shader from '../wgsl/preaggregation_stage_1.template.wgsl'
import preaggregation_stage_2_shader from '../wgsl/preaggregation_stage_2.template.wgsl'

// Hardcode params for word_size = 13
const p = BigInt('8444461749428370424248824938781546531375899335154063827935233455917409239041')
const r = BigInt('3336304672246003866643098545847835280997800251509046313505217280697450888997')
const word_size = 13
const num_words = 20

/*
 * End-to-end implementation of the cuZK MSM algorithm.
 */
export const cuzk_gpu = async (
    baseAffinePoints: BigIntPoint[],
    scalars: bigint[]
): Promise<{x: bigint, y: bigint}> => {
    // Determine the optimal window size dynamically based on a static analysis 
    // of varying input sizes. This will be determined using a seperate function.   
    const input_size = scalars.length
    const num_subtasks = 32
    const chunk_size = Math.ceil(256 / num_subtasks)

    // Each pass must use the same GPUDevice and GPUCommandEncoder, or else
    // storage buffers can't be reused across compute passes
    const device = await get_device()
    const commandEncoder = device.createCommandEncoder()

    // Convert the affine points to Montgomery form in the GPU
    const { point_x_y_sb, point_t_z_sb } =
        await convert_point_coords_to_mont_gpu(
            device,
            commandEncoder,
            baseAffinePoints,
            num_subtasks, 
            word_size,
            false,
        )

    // Decompose the scalars
    const scalar_chunks_sb = await decompose_scalars_gpu(
        device,
        commandEncoder,
        scalars,
        num_subtasks,
        chunk_size,
        false,
    )

    for (let subtask_idx = 0; subtask_idx < num_subtasks; subtask_idx ++) {
        // TODO: if debug is set to true in any invocations within a loop, the
        // sanity check will fail on the second iteration, because the
        // commandEncoder's finish() function has been used. To correctly
        // sanity-check these outputs, do so in a separate test file.
        const {
            new_point_indices_sb,
            cluster_start_indices_sb,
            cluster_end_indices_sb,
        } = await csr_precompute_gpu(
            device,
            commandEncoder,
            input_size,
            num_subtasks,
            subtask_idx,
            chunk_size,
            scalar_chunks_sb,
            true,
        )
        break

        const {
            new_point_x_y_sb,
            new_point_t_z_sb,
        } = await pre_aggregation_stage_1_gpu(
            device,
            commandEncoder,
            input_size,
            point_x_y_sb,
            point_t_z_sb,
            new_point_indices_sb,
            cluster_start_indices_sb,
            cluster_end_indices_sb,
            false,
        )

        const new_scalar_chunks_sb = await pre_aggregation_stage_2_gpu(
            device,
            commandEncoder,
            input_size,
            scalar_chunks_sb,
            cluster_start_indices_sb,
            new_point_indices_sb,
            false,
        )

        // TODO: produce row_idx
        // TODO: perform transposition
        // TODO: perform SMVP
        // TODO: final step
    }
    device.destroy()

    return { x: BigInt(1), y: BigInt(0) }
}

/*
 * Convert the affine points to Montgomery form

 * ASSUMPTION: the vast majority of WebGPU-enabled consumer devices have a
 * maximum buffer size of at least 268435456 bytes.
 * 
 * The default maximum buffer size is 268435456 bytes. Since each point
 * consumes 320 bytes, a maximum of around 2 ** 19 points can be stored in a
 * single buffer. If, however, we use 4 buffers - one for each point coordiante
 * X, Y, T, and Z - we can support up an input size of up to 2 ** 21 points.
 * Our implementation, however, will only support up to 2 ** 20 points as that
 * is the maximum input size for the ZPrize competition.
 * 
 * The test harness readme at https://github.com/demox-labs/webgpu-msm states:
 * "The submission should produce correct outputs on input vectors with length
 * up to 2^20. The evaluation will be using input randomly sampled from size
 * 2^16 ~ 2^20."
*/
export const convert_point_coords_to_mont_gpu = async (
    device: GPUDevice,
    commandEncoder: GPUCommandEncoder,
    baseAffinePoints: BigIntPoint[],
    num_subtasks: number,
    word_size: number,
    debug = false,
): Promise<{
    point_x_y_sb: GPUBuffer,
    point_t_z_sb: GPUBuffer,
}> => {
    const input_size = baseAffinePoints.length

    // An affine point only contains X and Y points.
    const x_y_coords = Array(input_size * 2).fill(BigInt(0))
    for (let i = 0; i < input_size; i ++) {
        x_y_coords[i * 2] = baseAffinePoints[i].x
        x_y_coords[i * 2 + 1] = baseAffinePoints[i].y
    }

    // Convert points to bytes (performs ~2x faster than `bigints_to_16_bit_words_for_gpu`)
    const x_y_coords_bytes = bigints_to_u8_for_gpu(x_y_coords, num_subtasks, word_size)

    // Input buffers
    const x_y_coords_sb = create_and_write_sb(device, x_y_coords_bytes)

    // Output buffers
    const point_x_y_sb = create_sb(device, input_size * 2 * num_words * 4)
    const point_t_z_sb = create_sb(device, input_size * 2 * num_words * 4)

    const bindGroupLayout = create_bind_group_layout(
        device,
        [
            'read-only-storage',
            'storage',
            'storage',
        ],
    )
    const bindGroup = create_bind_group(
        device,
        bindGroupLayout,
        [
            x_y_coords_sb,
            point_x_y_sb,
            point_t_z_sb,
        ],
    )

    const workgroup_size = 256
    const num_x_workgroups = 256

    const shaderCode = genConvertPointCoordsShaderCode(
        workgroup_size,
    )

    const computePipeline = await create_compute_pipeline(
        device,
        [bindGroupLayout],
        shaderCode,
        'main',
    )

    // execute_pipeline(commandEncoder, computePipeline, bindGroup, num_x_workgroups, num_y_workgroups, 1);

    const passEncoder = commandEncoder.beginComputePass()
    passEncoder.setPipeline(computePipeline)
    passEncoder.setBindGroup(0, bindGroup)
    passEncoder.dispatchWorkgroups(num_x_workgroups)
    passEncoder.end()

    if (debug) {
        const data = await read_from_gpu(
            device,
            commandEncoder,
            [point_x_y_sb, point_t_z_sb],
        )
        
        const computed_x_y_coords = u8s_to_bigints(data[0], num_words, word_size)
        const computed_t_z_coords = u8s_to_bigints(data[1], num_words, word_size)

        for (let i = 0; i < input_size; i ++) {
            const expected_x = baseAffinePoints[i].x * r % p
            const expected_y = baseAffinePoints[i].y * r % p
            const expected_t = (baseAffinePoints[i].x * baseAffinePoints[i].y * r) % p
            const expected_z = r % p

            if (!(
                expected_x === computed_x_y_coords[i * 2] 
                && expected_y === computed_x_y_coords[i * 2 + 1] 
                && expected_t === computed_t_z_coords[i * 2] 
                && expected_z === computed_t_z_coords[i * 2 + 1]
            )) {
                console.log('mismatch at', i)
                debugger
                break
            }
        }
    }

    return { point_x_y_sb, point_t_z_sb }
}

const genConvertPointCoordsShaderCode = (
    workgroup_size: number,
) => {
    const misc_params = compute_misc_params(p, word_size)
    const num_words = misc_params.num_words
    const n0 = misc_params.n0
    const mask = BigInt(2) ** BigInt(word_size) - BigInt(1)
    const r = misc_params.r
    const two_pow_word_size = 2 ** word_size
    const p_limbs = gen_p_limbs(p, num_words, word_size)
    const r_limbs = gen_r_limbs(r, num_words, word_size)
    const mu_limbs = gen_mu_limbs(p, num_words, word_size)
    const p_bitlength = p.toString(2).length
    const slack = num_words * word_size - p_bitlength
        const shaderCode = mustache.render(
        convert_point_coords_shader,
        {
            workgroup_size,
            num_words,
            word_size,
            n0,
            mask,
            two_pow_word_size,
            p_limbs,
            r_limbs,
            mu_limbs,
            w_mask: (1 << word_size) - 1,
            slack,
            num_words_mul_two: num_words * 2,
            num_words_plus_one: num_words + 1,
        },
        {
            structs,
            bigint_funcs,
            field_funcs,
            barrett_functions,
            montgomery_product_funcs,
        },
    )
    return shaderCode
}

export const decompose_scalars_gpu = async (
    device: GPUDevice,
    commandEncoder: GPUCommandEncoder,
    scalars: bigint[],
    num_subtasks: number,
    chunk_size: number,
    debug = false,
): Promise<GPUBuffer> => {
    const input_size = scalars.length
    assert(num_subtasks * chunk_size === 256)

    // Convert scalars to bytes
    const scalars_bytes = bigints_to_16_bit_words_for_gpu(scalars)

    // Input buffers
    const scalars_sb = create_and_write_sb(device, scalars_bytes)

    // Output buffer(s)
    const chunks_sb = create_sb(device, input_size * num_subtasks * 4)

    const bindGroupLayout = create_bind_group_layout(
        device,
        ['read-only-storage', 'storage'],
    )
    const bindGroup = create_bind_group(
        device,
        bindGroupLayout,
        [scalars_sb, chunks_sb],
    )

    const workgroup_size = 64
    const num_x_workgroups = 256
    const num_y_workgroups = input_size / workgroup_size / num_x_workgroups

    const shaderCode = genDecomposeScalarsShaderCode(
        workgroup_size,
        num_y_workgroups,
        num_subtasks,
        chunk_size, 
        input_size
    )

    const computePipeline = await create_compute_pipeline(
        device,
        [bindGroupLayout],
        shaderCode,
        'main',
    )

    const passEncoder = commandEncoder.beginComputePass()
    passEncoder.setPipeline(computePipeline)
    passEncoder.setBindGroup(0, bindGroup)
    passEncoder.dispatchWorkgroups(num_x_workgroups, num_y_workgroups, 1)
    passEncoder.end()

    if (debug) {
        const data = await read_from_gpu(
            device,
            commandEncoder,
            [chunks_sb],
        )

        const computed_chunks = u8s_to_numbers(data[0])

        const all_chunks: Uint16Array[] = []

        const expected: number[] = Array(scalars.length * num_subtasks).fill(0)
        for (let i = 0; i < scalars.length; i ++) {
            const chunks = to_words_le(scalars[i], num_subtasks, chunk_size)
            all_chunks.push(chunks)
        }
        for (let i = 0; i < chunk_size; i ++) {
            for (let j = 0; j < scalars.length; j ++) {
                expected[j * chunk_size + i] = all_chunks[j][i]
            }
        }
        const decompose_scalars_original = decompose_scalars(scalars, num_subtasks, chunk_size)

        if (computed_chunks.length !== expected.length) {
            throw Error('output size mismatch')
        }

        for (let j = 0; j < decompose_scalars_original.length; j++) {
            let z = 0;
            for (let i = j * input_size; i < (j + 1) * input_size; i++) {
                if (computed_chunks[i] !== decompose_scalars_original[j][z]) {
                    throw Error(`scalar decomp mismatch at ${i}`)
                }
                z++;
            }
        }
    }

    return chunks_sb
}

const genDecomposeScalarsShaderCode = (
    workgroup_size: number,
    num_y_workgroups: number,
    num_subtasks: number,
    chunk_size: number,
    input_size: number
) => {
    const shaderCode = mustache.render(
        decompose_scalars_shader,
        {
            workgroup_size,
            num_y_workgroups,
            num_subtasks,
            chunk_size,
            input_size,
        },
        {
            extract_word_from_bytes_le_funcs,
        },
    )
    return shaderCode
}

export const csr_precompute_gpu = async (
    device: GPUDevice,
    commandEncoder: GPUCommandEncoder,
    input_size: number,
    num_subtasks: number,
    subtask_idx: number,
    chunk_size: number,
    scalar_chunks_sb: GPUBuffer,
    debug = true,
): Promise<{
    new_point_indices_sb: GPUBuffer,
    cluster_start_indices_sb: GPUBuffer,
    cluster_end_indices_sb: GPUBuffer,
}> => {
    /*
    const test_scalar_chunks = 
        [
            0, 1, 1, 1, 1, 1, 6, 7,
            0, 0, 0, 0, 4, 4, 6, 7,
        ]
    const test_scalar_chunks_bytes = numbers_to_u8s_for_gpu(test_scalar_chunks)
    scalar_chunks_sb = create_and_write_sb(device, test_scalar_chunks_bytes)

    input_size = test_scalar_chunks.length
    num_subtasks = 1
    subtask_idx = 0
    */

    const test_scalar_chunks = TEST_CHUNKS
    const test_scalar_chunks_bytes = numbers_to_u8s_for_gpu(test_scalar_chunks)
    scalar_chunks_sb = create_and_write_sb(device, test_scalar_chunks_bytes)

    ///////////////

    // This is a serial operation, so only 1 shader should be used
    const num_x_workgroups = 1
    const num_y_workgroups = 1 

    const num_chunks = input_size / num_subtasks
    const max_cluster_size = 1
    const max_chunk_val = 2 ** chunk_size
    const overflow_size = max_chunk_val - max_cluster_size

    // Output buffers
    const new_point_indices_sb = create_sb(device, num_chunks * 4)
    const cluster_start_indices_sb = create_sb(device, num_chunks * 4)
    const cluster_end_indices_sb = create_sb(device, num_chunks * 4)
    const map_sb = create_sb(device, (max_cluster_size + 1) * max_chunk_val * 4)
    const overflow_sb = create_sb(device, overflow_size * 4)
    const keys_sb = create_sb(device, max_chunk_val * 4)
    const subtask_idx_sb = create_and_write_sb(device, numbers_to_u8s_for_gpu([subtask_idx]))

    const bindGroupLayout = create_bind_group_layout(
        device,
        [
            'read-only-storage', 'read-only-storage', 'storage', 'storage',
            'storage', 'storage', 'storage', 'storage',
        ]
    )

    // Reuse the output buffer from the scalar decomp step as one of the input buffers
    const bindGroup = create_bind_group(
        device,
        bindGroupLayout,
        [
            scalar_chunks_sb,
            subtask_idx_sb,
            new_point_indices_sb,
            cluster_start_indices_sb,
            cluster_end_indices_sb,
            map_sb,
            overflow_sb,
            keys_sb
        ],
    )

    const shaderCode = genCsrPrecomputeShaderCode(
        num_y_workgroups,
        max_chunk_val,
		input_size,
        num_subtasks,
        max_cluster_size,
        overflow_size,
    )

    const computePipeline = await create_compute_pipeline(
        device,
        [bindGroupLayout],
        shaderCode,
        'main',
    )

    execute_pipeline(commandEncoder, computePipeline, bindGroup, num_x_workgroups, num_y_workgroups, 1);

    if (debug) {
        const data = await read_from_gpu(
            device,
            commandEncoder,
            [
                new_point_indices_sb,
                cluster_start_indices_sb,
                cluster_end_indices_sb,
                scalar_chunks_sb,
                map_sb,
            ],
        )

        const [
            new_point_indices,
            cluster_start_indices,
            cluster_end_indices,
            scalar_chunks,
            map,
        ] = data.map(u8s_to_numbers_32)

        verify_gpu_precompute_output(
            input_size,
            subtask_idx,
            num_subtasks,
            max_cluster_size,
            overflow_size,
            scalar_chunks,
            new_point_indices,
            cluster_start_indices,
            cluster_end_indices,
            map,
        )
    }
    return { new_point_indices_sb, cluster_start_indices_sb, cluster_end_indices_sb }
}

const verify_gpu_precompute_output = (
    input_size: number,
    subtask_idx: number,
    num_subtasks: number,
    max_cluster_size: number,
    overflow_size: number,
    scalar_chunks: number[],
    new_point_indices: number[],
    cluster_start_indices: number[],
    cluster_end_indices: number[],
    map_sb: number[],
) => {
    const num_chunks = input_size / num_subtasks
    const scalar_chunks_for_this_subtask = scalar_chunks.slice(
        subtask_idx * num_chunks,
        subtask_idx * num_chunks + num_chunks,
    )
    console.log({
        scalar_chunks_for_this_subtask,
        new_point_indices,
        cluster_start_indices,
        cluster_end_indices,
        max_cluster_size,
        overflow_size,
        map_sb,
    })
    console.log('new_point_indices:', new_point_indices.toString())

    // Check that the values in new_point_indices can be used to reconstruct a
    // list of scalar chunks which, when sorted, match the sorted scalar chunks
    const reconstructed = Array(num_chunks).fill(0)

    for (let i = 0; i < num_chunks; i ++) {
        reconstructed[i] = scalar_chunks_for_this_subtask[new_point_indices[i]]
    }

    const sc_copy = scalar_chunks_for_this_subtask.map((x) => Number(x))
    const r_copy = reconstructed.map((x) => Number(x))
    sc_copy.sort((a, b) => a - b)
    r_copy.sort((a, b) => a - b)

    if (sc_copy.toString() !== r_copy.toString()) {
        debugger
        assert(false)
    }
    assert(sc_copy.toString() === r_copy.toString(), 'new_point_indices invalid')

    // Ensure that cluster_start_indices and cluster_end_indices have
    // the correct structure
    assert(cluster_start_indices.length === cluster_end_indices.length)
    for (let i = 0; i < cluster_start_indices.length; i ++) {
        // start <= end
        assert(cluster_start_indices[i] <= cluster_end_indices[i], `invalid cluster index at ${i}`)
    }
 
    // Check that the cluster start- and end- indices respect
    // max_cluster_size 
    for (let i = 0; i < cluster_start_indices.length; i ++) {
        // end - start <= max_cluster_size
        const d = cluster_end_indices[i] - cluster_start_indices[i]
        assert(d <= max_cluster_size)
    }
 
    // Generate random "points" and compute their linear combination
    // without any preaggregation, then compare the result using an algorithm
    // that uses preaggregation first
    const random_points: bigint[] = []
    for (let i = 0; i < num_chunks; i ++) {
        //const r = Math.floor(Math.random() * 100000)
        const r = BigInt(1)
        random_points.push(r)
    }

    // Calcualte the linear combination naively
    let lc_result = BigInt(0)
    for (let i = 0; i < num_chunks; i ++) {
        const prod = BigInt(scalar_chunks[i]) * random_points[i]
        lc_result += BigInt(prod)
    }

    // Calcualte the linear combination with preaggregation
    let preagg_result = BigInt(0)
    for (let i = 0; i < cluster_start_indices.length; i ++) {
        const start_idx = cluster_start_indices[i]
        const end_idx = cluster_end_indices[i]

        if (end_idx === 0) {
            break
        }

        let point = BigInt(random_points[new_point_indices[start_idx]])

        for (let j = cluster_start_indices[i] + 1; j < end_idx; j ++) {
            point += BigInt(random_points[new_point_indices[j]])
        }

        preagg_result += point * BigInt(scalar_chunks[new_point_indices[start_idx]])
    }
    assert(preagg_result === lc_result, 'result mismatch')
}

const genCsrPrecomputeShaderCode = (
    num_y_workgroups: number,
    max_chunk_val: number,
	input_size: number,
    num_subtasks: number,
    max_cluster_size: number,
    overflow_size: number,
) => {
    const shaderCode = mustache.render(
        gen_csr_precompute_shader,
        {
            num_y_workgroups,
            num_subtasks,
            max_cluster_size,
            max_cluster_size_plus_one: max_cluster_size + 1,
            max_chunk_val,
            num_chunks: input_size / num_subtasks,
            overflow_size,
        },
        {},
    )
    return shaderCode
}

export const pre_aggregation_stage_1_gpu = async (
    device: GPUDevice,
    commandEncoder: GPUCommandEncoder,
    input_size: number,
    point_x_y_sb: GPUBuffer,
    point_t_z_sb: GPUBuffer,
    new_point_indices_sb: GPUBuffer,
    cluster_start_indices_sb: GPUBuffer,
    cluster_end_indices_sb: GPUBuffer,
    debug = false,
): Promise<{
    new_point_x_y_sb: GPUBuffer,
    new_point_t_z_sb: GPUBuffer,
}> => {
    const new_point_x_y_sb = create_sb(device, input_size * 2 * num_words * 4)
    const new_point_t_z_sb = create_sb(device, input_size * 2 * num_words * 4)

    const bindGroupLayout = create_bind_group_layout(
        device,
        [
            'read-only-storage',
            'read-only-storage',
            'read-only-storage',
            'read-only-storage',
            'read-only-storage',
            'storage',
            'storage',
        ],
    )
    const bindGroup = create_bind_group(
        device,
        bindGroupLayout,
        [
            point_x_y_sb,
            point_t_z_sb,
            new_point_indices_sb,
            cluster_start_indices_sb,
            cluster_end_indices_sb,
            new_point_x_y_sb,
            new_point_t_z_sb,
        ],
    )

    const workgroup_size = 64
    const num_x_workgroups = 256
    const num_y_workgroups = input_size / workgroup_size / num_x_workgroups

    const shaderCode = genPreaggregationStage1ShaderCode(
        num_y_workgroups,
        workgroup_size,
    )

    const computePipeline = await create_compute_pipeline(
        device,
        [bindGroupLayout],
        shaderCode,
        'main',
    )

    execute_pipeline(commandEncoder, computePipeline, bindGroup, num_x_workgroups, num_y_workgroups, 1);

    if (debug) {
        const data = await read_from_gpu(
            device,
            commandEncoder,
            [
                new_point_x_y_sb,
                new_point_t_z_sb,
            ],
        )

        const x_y_coords = u8s_to_bigints(data[0], num_words, word_size)
        const t_z_coords = u8s_to_bigints(data[1], num_words, word_size)
        console.log(x_y_coords)
        console.log(t_z_coords)
    }

    return { new_point_x_y_sb, new_point_t_z_sb }
}

const genPreaggregationStage1ShaderCode = (
    num_y_workgroups: number,
    workgroup_size: number,
) => {
    const num_runs = 1
    const misc_params = compute_misc_params(p, word_size)
    const num_words = misc_params.num_words
    const n0 = misc_params.n0
    const mask = BigInt(2) ** BigInt(word_size) - BigInt(1)
    const r = misc_params.r
    const two_pow_word_size = 2 ** word_size
    const p_limbs = gen_p_limbs(p, num_words, word_size)
    const r_limbs = gen_r_limbs(r, num_words, word_size)
    const mu_limbs = gen_mu_limbs(p, num_words, word_size)
    const p_bitlength = p.toString(2).length
    const slack = num_words * word_size - p_bitlength

    const shaderCode = mustache.render(
        preaggregation_stage_1_shader,
        {
            num_y_workgroups,
            workgroup_size,
            word_size,
            num_words,
            n0,
            p_limbs,
            r_limbs,
            mu_limbs,
            w_mask: (1 << word_size) - 1,
            slack,
            num_words_mul_two: num_words * 2,
            num_words_plus_one: num_words + 1,
            mask,
            two_pow_word_size: BigInt(2) ** BigInt(word_size),
        },
        {
            structs,
            bigint_funcs,
            field_funcs,
            ec_funcs,
            montgomery_product_funcs,
        },
    )
    return shaderCode
}

export const pre_aggregation_stage_2_gpu = async (
    device: GPUDevice,
    commandEncoder: GPUCommandEncoder,
    input_size: number,
    scalar_chunks_sb: GPUBuffer,
    cluster_start_indices_sb: GPUBuffer,
    new_point_indices_sb: GPUBuffer,
    debug = false,
): Promise<GPUBuffer> => {
    const new_scalar_chunks_sb = create_sb(device, input_size *  num_words * 4)

    const bindGroupLayout = create_bind_group_layout(
        device,
        [
            'read-only-storage',
            'read-only-storage',
            'read-only-storage',
            'storage',
        ],
    )

    const bindGroup = create_bind_group(
        device,
        bindGroupLayout,
        [
            scalar_chunks_sb,
            new_point_indices_sb,
            cluster_start_indices_sb,
            new_scalar_chunks_sb,
        ],
    )

    const workgroup_size = 64
    const num_x_workgroups = 256
    const num_y_workgroups = input_size / workgroup_size / num_x_workgroups

    const shaderCode = genPreaggregationStage2ShaderCode(
        num_y_workgroups,
        workgroup_size,
    )

    const computePipeline = await create_compute_pipeline(
        device,
        [bindGroupLayout],
        shaderCode,
        'main',
    )

    execute_pipeline(commandEncoder, computePipeline, bindGroup, num_x_workgroups, num_y_workgroups, 1);
    
    if (debug) {
        // TODO
        const data = await read_from_gpu(
            device,
            commandEncoder,
            [new_scalar_chunks_sb],
        )
        const nums = data.map(u8s_to_numbers_32)
        console.log(nums)
    }

    return new_scalar_chunks_sb
}

const genPreaggregationStage2ShaderCode = (
    num_y_workgroups: number,
    workgroup_size: number,
) => {
    const p_limbs = gen_p_limbs(p, num_words, word_size)
    const r_limbs = gen_r_limbs(r, num_words, word_size)
    const mu_limbs = gen_mu_limbs(p, num_words, word_size)
    const shaderCode = mustache.render(
        preaggregation_stage_2_shader,
        {
            num_y_workgroups,
            workgroup_size,
        },
        {
        },
    )
    return shaderCode
}

const TEST_CHUNKS = [
    0,
    199,
    142,
    85,
    28,
    227,
    170,
    113,
    55,
    254,
    197,
    140,
    83,
    26,
    225,
    168,
    110,
    53,
    252,
    195,
    138,
    81,
    24,
    222,
    165,
    108,
    51,
    250,
    193,
    136,
    79,
    21,
    220,
    163,
    106,
    49,
    248,
    191,
    134,
    76,
    19,
    218,
    161,
    104,
    47,
    246,
    188,
    131,
    74,
    17,
    216,
    159,
    102,
    45,
    243,
    186,
    129,
    72,
    15,
    214,
    157,
    99,
    42,
    241,
    184,
    127,
    70,
    13,
    212,
    154,
    97,
    40,
    239,
    182,
    125,
    68,
    11,
    209,
    152,
    95,
    38,
    237,
    180,
    123,
    65,
    8,
    207,
    150,
    93,
    36,
    235,
    178,
    120,
    63,
    6,
    205,
    148,
    91,
    34,
    232,
    175,
    118,
    61,
    4,
    203,
    146,
    89,
    31,
    230,
    173,
    116,
    59,
    2,
    201,
    144,
    86,
    29,
    228,
    171,
    114,
    57,
    0,
    198,
    141,
    84,
    27,
    226,
    169,
    112,
    55,
    253,
    196,
    139,
    82,
    25,
    224,
    167,
    109,
    52,
    251,
    194,
    137,
    80,
    23,
    222,
    164,
    107,
    50,
    249,
    192,
    135,
    78,
    21,
    219,
    162,
    105,
    48,
    247,
    190,
    133,
    75,
    18,
    217,
    160,
    103,
    46,
    245,
    188,
    130,
    73,
    16,
    215,
    158,
    101,
    44,
    242,
    185,
    128,
    71,
    14,
    213,
    156,
    99,
    41,
    240,
    183,
    126,
    69,
    12,
    211,
    154,
    96,
    39,
    238,
    181,
    124,
    67,
    10,
    208,
    151,
    94,
    37,
    236,
    179,
    122,
    65,
    7,
    206,
    149,
    92,
    35,
    234,
    177,
    119,
    62,
    5,
    204,
    147,
    90,
    33,
    232,
    174,
    117,
    60,
    3,
    202,
    145,
    88,
    31,
    229,
    172,
    115,
    58,
    1,
    200,
    143,
    85,
    28,
    227,
    170,
    113,
    56,
    255,
    198,
    140,
    83,
    26,
    225,
    168,
    111,
    54,
    252,
    195,
    138,
    81,
    24,
    223,
    166,
    109,
    51,
    250,
    193,
    136,
    79,
    22,
    221,
    164,
    106,
    49,
    248,
    191,
    134,
    77,
    20,
    218,
    161,
    104,
    47,
    246,
    189,
    132,
    75,
    17,
    216,
    159,
    102,
    45,
    244,
    187,
    129,
    72,
    15,
    214,
    157,
    100,
    43,
    242,
    184,
    127,
    70,
    13,
    212,
    155,
    98,
    41,
    239,
    182,
    125,
    68,
    11,
    210,
    153,
    95,
    38,
    237,
    180,
    123,
    66,
    9,
    208,
    150,
    93,
    36,
    235,
    178,
    121,
    64,
    6,
    205,
    148,
    91,
    34,
    233,
    176,
    119,
    61,
    4,
    203,
    146,
    89,
    32,
    231,
    174,
    116,
    59,
    2,
    201,
    144,
    87,
    30,
    228,
    171,
    114,
    57,
    0,
    199,
    142,
    85,
    27,
    226,
    169,
    112,
    55,
    254,
    197,
    139,
    82,
    25,
    224,
    167,
    110,
    53,
    252,
    194,
    137,
    80,
    23,
    222,
    165,
    108,
    51,
    249,
    192,
    135,
    78,
    21,
    220,
    163,
    105,
    48,
    247,
    190,
    133,
    76,
    19,
    218,
    160,
    103,
    46,
    245,
    188,
    131,
    74,
    16,
    215,
    158,
    101,
    44,
    243,
    186,
    129,
    71,
    14,
    213,
    156,
    99,
    42,
    241,
    184,
    126,
    69,
    12,
    211,
    154,
    97,
    40,
    238,
    181,
    124,
    67,
    10,
    209,
    152,
    95,
    37,
    236,
    179,
    122,
    65,
    8,
    207,
    149,
    92,
    35,
    234,
    177,
    120,
    63,
    6,
    204,
    147,
    90,
    33,
    232,
    175,
    118,
    61,
    3,
    202,
    145,
    88,
    31,
    230,
    173,
    115,
    58,
    1,
    200,
    143,
    86,
    29,
    228,
    170,
    113,
    56,
    255,
    198,
    141,
    84,
    26,
    225,
    168,
    111,
    54,
    253,
    196,
    139,
    81,
    24,
    223,
    166,
    109,
    52,
    251,
    194,
    136,
    79,
    22,
    221,
    164,
    107,
    50,
    248,
    191,
    134,
    77,
    20,
    219,
    162,
    105,
    47,
    246,
    189,
    132,
    75,
    18,
    217,
    159,
    102,
    45,
    244,
    187,
    130,
    73,
    16,
    214,
    157,
    100,
    43,
    242,
    185,
    128,
    71,
    13,
    212,
    155,
    98,
    41,
    240,
    183,
    125,
    68,
    11,
    210,
    153,
    96,
    39,
    238,
    180,
    123,
    66,
    9,
    208,
    151,
    94,
    36,
    235,
    178,
    121,
    64,
    7,
    206,
    149,
    91,
    34,
    233,
    176,
    119,
    62,
    5,
    204,
    146,
    89,
    32,
    231,
    174,
    117,
    60,
    2,
    201,
    144,
    87,
    30,
    229,
    172,
    115,
    57,
    0,
    199,
    142,
    85,
    28,
    227,
    169,
    112,
    55,
    254,
    197,
    140,
    83,
    26,
    224,
    167,
    110,
    53,
    252,
    195,
    138,
    81,
    23,
    222,
    165,
    108,
    51,
    250,
    193,
    135,
    78,
    21,
    220,
    163,
    106,
    49,
    248,
    190,
    133,
    76,
    19,
    218,
    161,
    104,
    46,
    245,
    188,
    131,
    74,
    17,
    216,
    159,
    101,
    44,
    243,
    186,
    129,
    72,
    15,
    214,
    156,
    99,
    42,
    241,
    184,
    127,
    70,
    12,
    211,
    154,
    97,
    40,
    239,
    182,
    125,
    67,
    10,
    209,
    152,
    95,
    38,
    237,
    179,
    122,
    65,
    8,
    207,
    150,
    93,
    36,
    234,
    177,
    120,
    63,
    6,
    205,
    148,
    91,
    33,
    232,
    175,
    118,
    61,
    4,
    203,
    145,
    88,
    31,
    230,
    173,
    116,
    59,
    2,
    200,
    143,
    86,
    29,
    228,
    171,
    114,
    56,
    255,
    198,
    141,
    84,
    27,
    226,
    169,
    111,
    54,
    253,
    196,
    139,
    82,
    25,
    224,
    166,
    109,
    52,
    251,
    194,
    137,
    80,
    22,
    221,
    164,
    107,
    50,
    249,
    192,
    135,
    77,
    20,
    219,
    162,
    105,
    48,
    247,
    189,
    132,
    75,
    18,
    217,
    160,
    103,
    46,
    244,
    187,
    130,
    73,
    16,
    215,
    158,
    101,
    43,
    242,
    185,
    128,
    71,
    14,
    213,
    155,
    98,
    41,
    240,
    183,
    126,
    69,
    12,
    210,
    153,
    96,
    39,
    238,
    181,
    124,
    66,
    9,
    208,
    151,
    94,
    37,
    236,
    179,
    121,
    64,
    7,
    206,
    149,
    92,
    35,
    234,
    176,
    119,
    62,
    5,
    204,
    147,
    90,
    32,
    231,
    174,
    117,
    60,
    3,
    202,
    145,
    87,
    30,
    229,
    172,
    115,
    58,
    1,
    199,
    142,
    85,
    28,
    227,
    170,
    113,
    56,
    254,
    197,
    140,
    83,
    26,
    225,
    168,
    111,
    53,
    252,
    195,
    138,
    81,
    24,
    223,
    165,
    108,
    51,
    250,
    193,
    136,
    79,
    22,
    220,
    163,
    106,
    49,
    248,
    191,
    134,
    76,
    19,
    218,
    161,
    104,
    47,
    246,
    189,
    131,
    74,
    17,
    216,
    159,
    102,
    45,
    244,
    186,
    129,
    72,
    15,
    214,
    157,
    100,
    42,
    241,
    184,
    127,
    70,
    13,
    212,
    155,
    97,
    40,
    239,
    182,
    125,
    68,
    11,
    209,
    152,
    95,
    38,
    237,
    180,
    123,
    66,
    8,
    207,
    150,
    93,
    36,
    235,
    178,
    121,
    63,
    6,
    205,
    148,
    91,
    34,
    233,
    175,
    118,
    61,
    4,
    203,
    146,
    89,
    32,
    230,
    173,
    116,
    59,
    2,
    201,
    144,
    86,
    29,
    228,
    171,
    114,
    57,
    0,
    199,
    141,
    84,
    27,
    226,
    169,
    112,
    55,
    254,
    196,
    139,
    82,
    25,
    224,
    167,
    110,
    52,
    251,
    194,
    137,
    80,
    23,
    222,
    165,
    107,
    50,
    249,
    192,
    135,
    78,
    21,
    219,
    162,
    105,
    48,
    247,
    190,
    133,
    76,
    18,
    217,
    160,
    103,
    46,
    245,
    188,
    131,
    73,
    16,
    215,
    158,
    101,
    44,
    243,
    185,
    128,
    71,
    14,
    213,
    156,
    99,
    42,
    240,
    183,
    126,
    69,
    12,
    211,
    154,
    96,
    39,
    238,
    181,
    124,
    67,
    10,
    209,
    151,
    94,
    37,
    236,
    179,
    122,
    65,
    8,
    206,
    149,
    92,
    35,
    234,
    177,
    120,
    62,
    5,
    204,
    147,
    90,
    33,
    232,
    175,
    117,
    60,
    3,
    202,
    145,
    88,
    31,
    229,
    172,
    115,
    58,
    1,
    200,
    143,
    86,
    28,
    227,
    170,
    113,
    56,
    255,
    198,
    141,
    83,
    26,
    225,
    168,
    111,
    54,
    253,
    195,
    138,
    81,
    24,
    223,
    166,
    109,
    52,
    250,
    193,
    136,
    79,
    22,
    221,
    164,
    106,
    49,
    248,
    191,
    134,
    77,
    20,
    219,
    161,
    104,
    47,
    246,
    189,
    132,
    75,
    18,
    216,
    159,
    102,
    45,
    244,
    187,
    130,
    72,
    15,
    214,
    157,
    100,
    43,
    242,
    185,
    127,
    70,
    13,
    212,
    155,
    98,
    41,
    239,
    182,
    125,
    68,
    11,
    210,
    153,
    96,
    38,
    237,
    180,
    123,
    66,
    9,
    208,
    151,
    93,
    36,
    235,
    178,
    121,
    64,
    7,
    205,
    148,
    91,
    34,
    233,
    176,
    119,
    62,
    4,
    203,
    146,
    89,
    32,
    231,
    174,
    116,
    59,
    2,
    201,
    144,
    87,
    30,
    229,
    171,
    114,
    57,
    0,
    199,
    142,
    85,
    28,
    226,
    169,
    112,
    55,
    254,
    197,
    140,
    82,
    25,
    224,
    167,
    110,
    53,
    252,
    195,
    137,
    80,
    23,
    222,
    165,
    108,
    51,
    249,
    192,
    135,
    78,
    21,
    220,
    163,
    106,
    48,
    247,
    190,
    133,
    76,
    19,
    218,
    161,
    103,
    46,
    245,
    188,
    131,
    74,
    17,
    215,
    158,
    101,
    44,
    243,
    186,
    129,
    72,
    14,
    213,
    156,
    99,
    42,
    241,
    184,
    126,
    69,
    12,
    211,
    154,
    97,
    40,
    239,
    181,
    124,
    67,
    10,
    209,
    152,
    95,
    38,
    236,
    179,
    122,
    65,
    8,
    207,
    150,
    92,
    35,
    234,
    177,
    120,
    63,
    6,
    205,
    147,
    90,
    33,
    232,
    175,
    118,
    61,
    3,
    202,
    145,
    88,
    31,
    230,
    173,
    116,
    58,
    1,
    200,
    143,
    86,
    29,
    228,
    171,
    113,
    56,
    255,
    198,
    141,
    84,
    27,
    225,
    168,
    111,
    54,
    253,
    196,
    139,
    82,
    24,
    223,
    166,
    109,
    52,
    251,
    194,
    136,
    79,
    22,
    221,
    164,
    107,
    50,
    249,
    191,
    134,
    77,
    20,
    219,
    162,
    105,
    48,
    246,
    189,
    132,
    75,
    18,
    217,
    160,
    102,
    45,
    244,
    187,
    130,
    73,
    16,
    215,
    157,
    100,
    43,
    242,
    185,
    128,
    71,
    13,
    212,
    155,
    98,
    41,
    240,
    183,
    126,
    68,
    11,
    210,
    153,
    96,
    39,
    238,
    181,
    123,
    66,
    9,
    208,
    151,
    94,
    37,
    235,
    178,
    121,
    64,
    7,
    206,
    149,
    92,
    34,
    233,
    176,
    119,
    62,
    5,
    204,
    146,
    89,
    32,
    231,
    174,
    117,
    60,
    3,
    201,
    144,
    87,
    30,
    229,
    172,
    115,
    58,
    0,
    199,
    142,
    85,
    28,
    227,
    170,
    112,
    55,
    254,
    197,
    140,
    83,
    26,
    225,
    167,
    110,
    53,
    252,
    195,
    138,
    81,
    23,
    222,
    165,
    108,
    51,
    250,
    193,
    136,
    78,
    21,
    220,
    163,
    106,
    49,
    248,
    191,
    133,
    76,
    19,
    218,
    161,
    104,
    47,
    245,
    188,
    131,
    74,
    17,
    216,
    159,
    102,
    44,
    243,
    186,
    129,
    72,
    15,
    214,
    156,
    99,
    42,
    241,
    184,
    127,
    70,
    13,
    211,
    154,
    97,
    40,
    239,
    182,
    125,
    68,
    10,
    209,
    152,
    95,
    38,
    237,
    180,
    122,
    65,
    8,
    207,
    150,
    93,
    36,
    235,
    177,
    120,
    63,
    6,
    205,
    148,
    91,
    33,
    232,
    175,
    118,
    61,
    4,
    203,
    146,
    88,
    31,
    230,
    173,
    116,
    59,
    2,
    201,
    143,
    86,
    29,
    228,
    171,
    114,
    57,
    255,
    198,
    141,
    84,
    27,
    226,
    169,
    112,
    54,
    253,
    196,
    139,
    82,
    25,
    224,
    166,
    109,
    52,
    251,
    194,
    137,
    80,
    23,
    221,
    164,
    107,
    50,
    249,
    192,
    135,
    78,
    20,
    219,
    162,
    105,
    48,
    247,
    190,
    132,
    75,
    18,
    217,
    160,
    103,
    46,
    245,
    187,
    130,
    73,
    16,
    215,
    158,
    101,
    43,
    242,
    185,
    128,
    71,
    14,
    213,
    156,
    98,
    41,
    240,
    183,
    126,
    69,
    12,
    211,
    153,
    96,
    39,
    238,
    181,
    124,
    67,
    9,
    208,
    151,
    94,
    37,
    236,
    179,
    122,
    64,
    7,
    206,
    149,
    92,
    35,
    234,
    176,
    119,
    62,
    5,
    204,
    147,
    90,
    33,
    231,
    174,
    117,
    60,
    3,
    202,
    145,
    88,
    30,
    229,
    172,
    115,
    58,
    1,
    200,
    142,
    85,
    28,
    227,
    170,
    113,
    56,
    255,
    197,
    140,
    83,
    26,
    225,
    168,
    111,
    53,
    252,
    195,
    138,
    81,
    24,
    223,
    166,
    108,
    51,
    250,
    193,
    136,
    79,
    22,
    221,
    163,
    106,
    49,
    248,
    191,
    134,
    77,
    19,
    218,
    161,
    104,
    47,
    246,
    189,
    132,
    74,
    17,
    216,
    159,
    102,
    45,
    244,
    186,
    129,
    72,
    15,
    214,
    157,
    100,
    43,
    241,
    184,
    127,
    70,
    13,
    212,
    155,
    98,
    40,
    239,
    182,
    125,
    68,
    11,
    210,
    152,
    95,
    38,
    237,
    180,
    123,
    66,
    9,
    207,
    150,
    93,
    36,
    235,
    178,
    121,
    63,
    6,
    205,
    148,
    91,
    34,
    233,
    176,
    118,
    61,
    4,
    203,
    146,
    89,
    32,
    231,
    173,
    116,
    59,
    2,
    201,
    144,
    87,
    29,
    228,
    171,
    114,
    57,
    0,
    199,
    142,
    84,
    27,
    226,
    169,
    112,
    55,
    254,
    196,
    139,
    82,
    25,
    224,
    167,
    110,
    53,
    251,
    194,
    137,
    80,
    23,
    222,
    165,
    108,
    50,
    249,
    192,
    135,
    78,
    21,
    220,
    162,
    105,
    48,
    247,
    190,
    133,
    76,
    19,
    217,
    160,
    103,
    46,
    245,
    188,
    131,
    73,
    16,
    215,
    158,
    101,
    44,
    243,
    186,
    128,
    71,
    14,
    213,
    156,
    99,
    42,
    241,
    183,
    126,
    69,
    12,
    211,
    154,
    97,
    39,
    238,
    181,
    124,
    67,
    10,
    209,
    152,
    94,
    37,
    236,
    179,
    122,
    65,
    8,
    206,
    149,
    92,
    35,
    234,
    177,
    120,
    63,
    5,
    204,
    147,
    90,
    33,
    232,
    175,
    118,
    60,
    3,
    202,
    145,
    88,
    31,
    230,
    172,
    115,
    58,
    1,
    200,
    143,
    86,
    29,
    227,
    170,
    113,
    56,
    255,
    198,
    141,
    83,
    26,
    225,
    168,
    111,
    54,
    253,
    196,
    138,
    81,
    24,
    223,
    166,
    109,
    52,
    251,
    193,
    136,
    79,
    22,
    221,
    164,
    107,
    49,
    248,
    191,
    134,
    77,
    20,
    219,
    162,
    104,
    47,
    246,
    189,
    132,
    75,
    18,
    216,
    159,
    102,
    45,
    244,
    187,
    130,
    73,
    15,
    214,
    157,
    100,
    43,
    242,
    185,
    128,
    70,
    13,
    212,
    155,
    98,
    41,
    240,
    182,
    125,
    68,
    11,
    210,
    153,
    96,
    39,
    237,
    180,
    123,
    66,
    9,
    208,
    151,
    93,
    36,
    235,
    178,
    121,
    64,
    7,
    206,
    148,
    91,
    34,
    233,
    176,
    119,
    62,
    5,
    203,
    146,
    89,
    32,
    231,
    174,
    117,
    59,
    2,
    201,
    144,
    87,
    30,
    229,
    172,
    114,
    57,
    0,
    199,
    142,
    85,
    28,
    226,
    169,
    112,
    55,
    254,
    197,
    140,
    83,
    25,
    224,
    167,
    110,
    53,
    252,
    195,
    138,
    80,
    23,
    222,
    165,
    108,
    51,
    250,
    192,
    135,
    78,
    21,
    220,
    163,
    106,
    49,
    247,
    190,
    133,
    76,
    19,
    218,
    161,
    103,
    46,
    245,
    188,
    131,
    74,
    17,
    216,
    158,
    101,
    44
]
